/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGJAVA

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


#include "ValidatorAzkoyen.hpp"
#include "StateMachine.hpp"
#include "AzkoyenControl.hpp"
using namespace AzkoyenControl;
using namespace StateMachine;
using namespace ValidatorAzkoyen;


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SpdlogLevels_1t_1Code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::SpdlogLevels_t *arg1 = (ValidatorAzkoyen::SpdlogLevels_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::SpdlogLevels_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Code = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SpdlogLevels_1t_1Code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::SpdlogLevels_t *arg1 = (ValidatorAzkoyen::SpdlogLevels_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::SpdlogLevels_t **)&jarg1; 
  result = (int) ((arg1)->Code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SpdlogLevels_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::SpdlogLevels_t *arg1 = (ValidatorAzkoyen::SpdlogLevels_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::SpdlogLevels_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SpdlogLevels_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorAzkoyen::SpdlogLevels_t *arg1 = (ValidatorAzkoyen::SpdlogLevels_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::SpdlogLevels_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1SpdlogLevels_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::SpdlogLevels_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorAzkoyen::SpdlogLevels_t *)new ValidatorAzkoyen::SpdlogLevels_t();
  *(ValidatorAzkoyen::SpdlogLevels_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1SpdlogLevels_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorAzkoyen::SpdlogLevels_t *arg1 = (ValidatorAzkoyen::SpdlogLevels_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorAzkoyen::SpdlogLevels_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Code = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  result = (int) ((arg1)->Code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Static_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Static = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Static_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  result = (int) ((arg1)->Static);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Critical_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Critical = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodePolling_1t_1Critical_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  result = (int) ((arg1)->Critical);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1ErrorCodePolling_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::ErrorCodePolling_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorAzkoyen::ErrorCodePolling_t *)new ValidatorAzkoyen::ErrorCodePolling_t();
  *(ValidatorAzkoyen::ErrorCodePolling_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1ErrorCodePolling_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorAzkoyen::ErrorCodePolling_t *arg1 = (ValidatorAzkoyen::ErrorCodePolling_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorAzkoyen::ErrorCodePolling_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinPolling_1t_1Channel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::CoinPolling_t *arg1 = (ValidatorAzkoyen::CoinPolling_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::CoinPolling_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Channel = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinPolling_1t_1Channel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::CoinPolling_t *arg1 = (ValidatorAzkoyen::CoinPolling_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::CoinPolling_t **)&jarg1; 
  result = (int) ((arg1)->Channel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinPolling_1t_1Coin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::CoinPolling_t *arg1 = (ValidatorAzkoyen::CoinPolling_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::CoinPolling_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Coin = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinPolling_1t_1Coin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::CoinPolling_t *arg1 = (ValidatorAzkoyen::CoinPolling_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::CoinPolling_t **)&jarg1; 
  result = (int) ((arg1)->Coin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1CoinPolling_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::CoinPolling_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorAzkoyen::CoinPolling_t *)new ValidatorAzkoyen::CoinPolling_t();
  *(ValidatorAzkoyen::CoinPolling_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1CoinPolling_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorAzkoyen::CoinPolling_t *arg1 = (ValidatorAzkoyen::CoinPolling_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorAzkoyen::CoinPolling_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodeExComm_1t_1Code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::ErrorCodeExComm_t *arg1 = (ValidatorAzkoyen::ErrorCodeExComm_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodeExComm_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Code = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodeExComm_1t_1Code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::ErrorCodeExComm_t *arg1 = (ValidatorAzkoyen::ErrorCodeExComm_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodeExComm_t **)&jarg1; 
  result = (int) ((arg1)->Code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodeExComm_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::ErrorCodeExComm_t *arg1 = (ValidatorAzkoyen::ErrorCodeExComm_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodeExComm_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_ErrorCodeExComm_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorAzkoyen::ErrorCodeExComm_t *arg1 = (ValidatorAzkoyen::ErrorCodeExComm_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::ErrorCodeExComm_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1ErrorCodeExComm_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::ErrorCodeExComm_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorAzkoyen::ErrorCodeExComm_t *)new ValidatorAzkoyen::ErrorCodeExComm_t();
  *(ValidatorAzkoyen::ErrorCodeExComm_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1ErrorCodeExComm_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorAzkoyen::ErrorCodeExComm_t *arg1 = (ValidatorAzkoyen::ErrorCodeExComm_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorAzkoyen::ErrorCodeExComm_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_FaultCode_1t_1Code_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::FaultCode_t *arg1 = (ValidatorAzkoyen::FaultCode_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::FaultCode_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Code = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_FaultCode_1t_1Code_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::FaultCode_t *arg1 = (ValidatorAzkoyen::FaultCode_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::FaultCode_t **)&jarg1; 
  result = (int) ((arg1)->Code);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_FaultCode_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::FaultCode_t *arg1 = (ValidatorAzkoyen::FaultCode_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::FaultCode_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_FaultCode_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorAzkoyen::FaultCode_t *arg1 = (ValidatorAzkoyen::FaultCode_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::FaultCode_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1FaultCode_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::FaultCode_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorAzkoyen::FaultCode_t *)new ValidatorAzkoyen::FaultCode_t();
  *(ValidatorAzkoyen::FaultCode_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1FaultCode_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorAzkoyen::FaultCode_t *arg1 = (ValidatorAzkoyen::FaultCode_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorAzkoyen::FaultCode_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SerialPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SerialPort = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SerialPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->SerialPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SuccessConnect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SuccessConnect = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SuccessConnect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (bool) ((arg1)->SuccessConnect);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1PortO_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PortO = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1PortO_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->PortO);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinEvent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinEvent = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinEvent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->CoinEvent);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinEventPrev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinEventPrev = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinEventPrev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->CoinEventPrev);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinCinc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinCinc = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinCinc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->CoinCinc);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinCien_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinCien = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinCien_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->CoinCien);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinDosc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinDosc = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinDosc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->CoinDosc);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinQuin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinQuin = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinQuin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->CoinQuin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinMil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinMil = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CoinMil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->CoinMil);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorHappened_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ErrorHappened = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorHappened_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (bool) ((arg1)->ErrorHappened);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CriticalError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CriticalError = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CriticalError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (bool) ((arg1)->CriticalError);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorOCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->ErrorOCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ErrorOMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (std::string *) & ((arg1)->ErrorOMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOStatic_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorOStatic = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOStatic_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->ErrorOStatic);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOCritical_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorOCritical = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ErrorOCritical_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->ErrorOCritical);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1FaultOCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FaultOCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1FaultOCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->FaultOCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1FaultOMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->FaultOMsg = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1FaultOMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (std::string *) & ((arg1)->FaultOMsg);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1NoUsedBit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoUsedBit = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1NoUsedBit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (bool) ((arg1)->NoUsedBit);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1MeasurePhotoBlocked_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MeasurePhotoBlocked = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1MeasurePhotoBlocked_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (bool) ((arg1)->MeasurePhotoBlocked);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1OutPhotoBlocked_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->OutPhotoBlocked = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1OutPhotoBlocked_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (bool) ((arg1)->OutPhotoBlocked);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1COSAlert_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->COSAlert = arg2;
}


SWIGEXPORT jboolean JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1COSAlert_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (bool) ((arg1)->COSAlert);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ActOCoin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ActOCoin = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ActOCoin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->ActOCoin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ActOChannel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ActOChannel = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ActOChannel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->ActOChannel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1LoggerLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LoggerLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1LoggerLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->LoggerLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1LogFilePath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->LogFilePath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1LogFilePath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (std::string *) & ((arg1)->LogFilePath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1MaxPorts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxPorts = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1MaxPorts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int) ((arg1)->MaxPorts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1AzkoyenClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ValidatorAzkoyen::AzkoyenClass *)new ValidatorAzkoyen::AzkoyenClass();
  *(ValidatorAzkoyen::AzkoyenClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1AzkoyenClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SearchSpdlogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  ValidatorAzkoyen::SpdlogLevels_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchSpdlogLevel(arg2);
  *(ValidatorAzkoyen::SpdlogLevels_t **)&jresult = new ValidatorAzkoyen::SpdlogLevels_t(result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SetSpdlogLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  (arg1)->SetSpdlogLevel();
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SearchErrorCodeExComm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  ValidatorAzkoyen::ErrorCodeExComm_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchErrorCodeExComm(arg2);
  *(ValidatorAzkoyen::ErrorCodeExComm_t **)&jresult = new ValidatorAzkoyen::ErrorCodeExComm_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SearchCoin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  ValidatorAzkoyen::CoinPolling_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchCoin(arg2);
  *(ValidatorAzkoyen::CoinPolling_t **)&jresult = new ValidatorAzkoyen::CoinPolling_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SearchErrorCodePolling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  ValidatorAzkoyen::ErrorCodePolling_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchErrorCodePolling(arg2);
  *(ValidatorAzkoyen::ErrorCodePolling_t **)&jresult = new ValidatorAzkoyen::ErrorCodePolling_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SearchFaultCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  ValidatorAzkoyen::FaultCode_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->SearchFaultCode(arg2);
  *(ValidatorAzkoyen::FaultCode_t **)&jresult = new ValidatorAzkoyen::FaultCode_t(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1StIdle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->StIdle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1StConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->StConnect();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1StCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->StCheck();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1StWaitPoll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->StWaitPoll();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1StPolling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->StPolling();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1StReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->StReset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1StError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->StError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1InitLogger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->InitLogger((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ConnectSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->ConnectSerial(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ScanPorts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->ScanPorts();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SendingCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->SendingCommand(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ExecuteCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::vector< unsigned char > arg2 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (int)(arg1)->ExecuteCommand(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1HandleResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::vector< unsigned char > arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->HandleResponse(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1HandleResponsePolling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::vector< unsigned char > arg2 ;
  int arg3 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->HandleResponsePolling(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1HandleResponseInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  std::vector< unsigned char > arg2 ;
  int arg3 ;
  std::vector< unsigned char > *argp2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  argp2 = *(std::vector< unsigned char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< unsigned char >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->HandleResponseInfo(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CheckOptoStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->CheckOptoStates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SimplePoll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->SimplePoll();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1SelfCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->SelfCheck();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1EnableChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->EnableChannels();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1CheckEventReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->CheckEventReset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ResetDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (int)(arg1)->ResetDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1BuildCmdModifyInhibit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->BuildCmdModifyInhibit(arg2,arg3);
  *(std::vector< unsigned char > **)&jresult = new std::vector< unsigned char >(result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenClass_1ChangeInhibitChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ChangeInhibitChannels(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1StateMachine_1t_1CurrState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StateMachine::SMClass::StateMachine_t *arg1 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  StateMachine::SMClass::State_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass::StateMachine_t **)&jarg1; 
  arg2 = (StateMachine::SMClass::State_t)jarg2; 
  if (arg1) (arg1)->CurrState = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1StateMachine_1t_1CurrState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass::StateMachine_t *arg1 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  StateMachine::SMClass::State_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass::StateMachine_t **)&jarg1; 
  result = (StateMachine::SMClass::State_t) ((arg1)->CurrState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1SMClass_1StateMachine_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StateMachine::SMClass::StateMachine_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StateMachine::SMClass::StateMachine_t *)new StateMachine::SMClass::StateMachine_t();
  *(StateMachine::SMClass::StateMachine_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1SMClass_1StateMachine_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StateMachine::SMClass::StateMachine_t *arg1 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StateMachine::SMClass::StateMachine_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1SMClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg1 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  StateMachine::SMClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg1; 
  result = (StateMachine::SMClass *)new StateMachine::SMClass(arg1);
  *(StateMachine::SMClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1SM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *arg2 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = *(StateMachine::SMClass::StateMachine_t **)&jarg2; 
  if (arg1) (arg1)->SM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1SM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::StateMachine_t *)& ((arg1)->SM);
  *(StateMachine::SMClass::StateMachine_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1LS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *arg2 = (StateMachine::SMClass::StateMachine_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = *(StateMachine::SMClass::StateMachine_t **)&jarg2; 
  if (arg1) (arg1)->LS = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1LS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::StateMachine_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::StateMachine_t *)& ((arg1)->LS);
  *(StateMachine::SMClass::StateMachine_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1Evento_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::Event_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::Event_t)jarg2; 
  if (arg1) (arg1)->Evento = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1Evento_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::Event_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::Event_t) ((arg1)->Evento);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1Estado_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::State_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::State_t)jarg2; 
  if (arg1) (arg1)->Estado = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1Estado_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::State_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (StateMachine::SMClass::State_t) ((arg1)->Estado);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1InitStateMachine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  (arg1)->InitStateMachine();
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1StateMachineRun(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::Event_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::Event_t)jarg2; 
  result = (int)(arg1)->StateMachineRun(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1RunCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (int)(arg1)->RunCheck();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1RunReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  result = (int)(arg1)->RunReset();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_SMClass_1StateMachineGetStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  StateMachine::SMClass::State_t arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  arg2 = (StateMachine::SMClass::State_t)jarg2; 
  result = (char *)(arg1)->StateMachineGetStateName(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1SMClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StateMachine::SMClass *arg1 = (StateMachine::SMClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StateMachine::SMClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_Response_1t_1StatusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::Response_t *arg1 = (AzkoyenControl::Response_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::Response_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StatusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_Response_1t_1StatusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::Response_t *arg1 = (AzkoyenControl::Response_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::Response_t **)&jarg1; 
  result = (int) ((arg1)->StatusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_Response_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AzkoyenControl::Response_t *arg1 = (AzkoyenControl::Response_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::Response_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_Response_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AzkoyenControl::Response_t *arg1 = (AzkoyenControl::Response_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::Response_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1Response_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AzkoyenControl::Response_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AzkoyenControl::Response_t *)new AzkoyenControl::Response_t();
  *(AzkoyenControl::Response_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1Response_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AzkoyenControl::Response_t *arg1 = (AzkoyenControl::Response_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AzkoyenControl::Response_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1StatusCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StatusCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1StatusCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  result = (int) ((arg1)->StatusCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Event_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Event = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Event_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  result = (int) ((arg1)->Event);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Coin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Coin = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Coin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  result = (int) ((arg1)->Coin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Remaining_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Remaining = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinError_1t_1Remaining_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  result = (int) ((arg1)->Remaining);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1CoinError_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AzkoyenControl::CoinError_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AzkoyenControl::CoinError_t *)new AzkoyenControl::CoinError_t();
  *(AzkoyenControl::CoinError_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1CoinError_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AzkoyenControl::CoinError_t *arg1 = (AzkoyenControl::CoinError_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AzkoyenControl::CoinError_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinCinc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinCinc = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinCinc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  result = (int) ((arg1)->CoinCinc);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinCien_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinCien = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinCien_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  result = (int) ((arg1)->CoinCien);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinDosc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinDosc = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinDosc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  result = (int) ((arg1)->CoinDosc);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinQuin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinQuin = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinQuin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  result = (int) ((arg1)->CoinQuin);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinMil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CoinMil = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_CoinLost_1t_1CoinMil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  result = (int) ((arg1)->CoinMil);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1CoinLost_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AzkoyenControl::CoinLost_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AzkoyenControl::CoinLost_t *)new AzkoyenControl::CoinLost_t();
  *(AzkoyenControl::CoinLost_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1CoinLost_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AzkoyenControl::CoinLost_t *arg1 = (AzkoyenControl::CoinLost_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AzkoyenControl::CoinLost_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Version = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Version);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Device_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Device = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Device_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->Device);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1ErrorType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorType = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1ErrorType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->ErrorType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1ErrorCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorCode = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1ErrorCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->ErrorCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Message = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  result = (std::string *) & ((arg1)->Message);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1AditionalInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->AditionalInfo = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1AditionalInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  result = (std::string *) & ((arg1)->AditionalInfo);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Priority = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_TestStatus_1t_1Priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  result = (int) ((arg1)->Priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1TestStatus_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AzkoyenControl::TestStatus_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AzkoyenControl::TestStatus_t *)new AzkoyenControl::TestStatus_t();
  *(AzkoyenControl::TestStatus_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1TestStatus_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AzkoyenControl::TestStatus_t *arg1 = (AzkoyenControl::TestStatus_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AzkoyenControl::TestStatus_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_GlobalVariables_1AzkoyenObject_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AzkoyenControl::GlobalVariables *arg1 = (AzkoyenControl::GlobalVariables *) 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg2 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AzkoyenControl::GlobalVariables **)&jarg1; 
  arg2 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg2; 
  if (arg1) (arg1)->AzkoyenObject = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_GlobalVariables_1AzkoyenObject_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::GlobalVariables *arg1 = (AzkoyenControl::GlobalVariables *) 0 ;
  ValidatorAzkoyen::AzkoyenClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::GlobalVariables **)&jarg1; 
  result = (ValidatorAzkoyen::AzkoyenClass *)& ((arg1)->AzkoyenObject);
  *(ValidatorAzkoyen::AzkoyenClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_GlobalVariables_1AzkoyenPointer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AzkoyenControl::GlobalVariables *arg1 = (AzkoyenControl::GlobalVariables *) 0 ;
  ValidatorAzkoyen::AzkoyenClass *arg2 = (ValidatorAzkoyen::AzkoyenClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AzkoyenControl::GlobalVariables **)&jarg1; 
  arg2 = *(ValidatorAzkoyen::AzkoyenClass **)&jarg2; 
  if (arg1) (arg1)->AzkoyenPointer = arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_GlobalVariables_1AzkoyenPointer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::GlobalVariables *arg1 = (AzkoyenControl::GlobalVariables *) 0 ;
  ValidatorAzkoyen::AzkoyenClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::GlobalVariables **)&jarg1; 
  result = (ValidatorAzkoyen::AzkoyenClass *) ((arg1)->AzkoyenPointer);
  *(ValidatorAzkoyen::AzkoyenClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_GlobalVariables_1SMObject_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AzkoyenControl::GlobalVariables *arg1 = (AzkoyenControl::GlobalVariables *) 0 ;
  StateMachine::SMClass *arg2 = (StateMachine::SMClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AzkoyenControl::GlobalVariables **)&jarg1; 
  arg2 = *(StateMachine::SMClass **)&jarg2; 
  if (arg1) (arg1)->SMObject = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_GlobalVariables_1SMObject_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::GlobalVariables *arg1 = (AzkoyenControl::GlobalVariables *) 0 ;
  StateMachine::SMClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::GlobalVariables **)&jarg1; 
  result = (StateMachine::SMClass *)& ((arg1)->SMObject);
  *(StateMachine::SMClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1GlobalVariables(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AzkoyenControl::GlobalVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AzkoyenControl::GlobalVariables *)new AzkoyenControl::GlobalVariables();
  *(AzkoyenControl::GlobalVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1GlobalVariables(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AzkoyenControl::GlobalVariables *arg1 = (AzkoyenControl::GlobalVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AzkoyenControl::GlobalVariables **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1PortO_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PortO = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1PortO_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (int) ((arg1)->PortO);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1WarnToCritical_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WarnToCritical = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1WarnToCritical_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (int) ((arg1)->WarnToCritical);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1MaxCritical_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxCritical = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1MaxCritical_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (int) ((arg1)->MaxCritical);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1Path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->Path = *arg2;
}


SWIGEXPORT jstring JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1Path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (std::string *) & ((arg1)->Path);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1LogLvl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LogLvl = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1LogLvl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (int) ((arg1)->LogLvl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1MaximumPorts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaximumPorts = arg2;
}


SWIGEXPORT jint JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1MaximumPorts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (int) ((arg1)->MaximumPorts);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1Globals_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::GlobalVariables *arg2 = (AzkoyenControl::GlobalVariables *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = *(AzkoyenControl::GlobalVariables **)&jarg2; 
  if (arg1) (arg1)->Globals = *arg2;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1Globals_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::GlobalVariables *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (AzkoyenControl::GlobalVariables *)& ((arg1)->Globals);
  *(AzkoyenControl::GlobalVariables **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_new_1AzkoyenControlClass(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (AzkoyenControl::AzkoyenControlClass *)new AzkoyenControl::AzkoyenControlClass();
  *(AzkoyenControl::AzkoyenControlClass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_delete_1AzkoyenControlClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1InitLog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  (arg1)->InitLog();
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1Connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->Connect();
  *(AzkoyenControl::Response_t **)&jresult = new AzkoyenControl::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1CheckDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->CheckDevice();
  *(AzkoyenControl::Response_t **)&jresult = new AzkoyenControl::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1StartReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->StartReader();
  *(AzkoyenControl::Response_t **)&jresult = new AzkoyenControl::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1GetCoin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::CoinError_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->GetCoin();
  *(AzkoyenControl::CoinError_t **)&jresult = new AzkoyenControl::CoinError_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1GetLostCoins(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::CoinLost_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->GetLostCoins();
  *(AzkoyenControl::CoinLost_t **)&jresult = new AzkoyenControl::CoinLost_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1ModifyChannels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int arg2 ;
  int arg3 ;
  AzkoyenControl::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->ModifyChannels(arg2,arg3);
  *(AzkoyenControl::Response_t **)&jresult = new AzkoyenControl::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1StopReader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->StopReader();
  *(AzkoyenControl::Response_t **)&jresult = new AzkoyenControl::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1ResetDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->ResetDevice();
  *(AzkoyenControl::Response_t **)&jresult = new AzkoyenControl::Response_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1TestStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  AzkoyenControl::TestStatus_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  result = (arg1)->TestStatus();
  *(AzkoyenControl::TestStatus_t **)&jresult = new AzkoyenControl::TestStatus_t(result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_hardware_azkoyen_AzkoyenControlJNI_AzkoyenControlClass_1CheckCodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  AzkoyenControl::AzkoyenControlClass *arg1 = (AzkoyenControl::AzkoyenControlClass *) 0 ;
  int arg2 ;
  AzkoyenControl::Response_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(AzkoyenControl::AzkoyenControlClass **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->CheckCodes(arg2);
  *(AzkoyenControl::Response_t **)&jresult = new AzkoyenControl::Response_t(result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

